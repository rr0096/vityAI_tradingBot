# tools/news_scraper.py
import json
import logging
import os
import time
import requests
from pathlib import Path
from typing import Any, List, Dict, Optional, Union

logger = logging.getLogger(__name__)

# --- Configuration ---
# Get tokens from environment variable, split by comma if multiple are provided
CRYPTOPANIC_TOKENS_STR = os.getenv("CRYPTOPANIC_TOKENS", "")
CRYPTOPANIC_API_TOKENS: List[str] = [token.strip() for token in CRYPTOPANIC_TOKENS_STR.split(',') if token.strip()]

if not CRYPTOPANIC_API_TOKENS:
    logger.error("CRITICAL: No CRYPTOPANIC_TOKENS found in environment variables. News fetching will likely fail.")
    # Provide a dummy token to prevent crashes if the list is empty, but log the error.
    CRYPTOPANIC_API_TOKENS.append("dummy_token_please_configure")


# API Endpoint (v1 is used in the original code, v2/developer was seen in some error logs)
# Make this configurable if needed, or choose the one that works.
# For now, sticking to v1 as per the original functional code.
API_BASE_URL = "https://cryptopanic.com/api/v1/posts/"
# If v1 fails, you might try: "https://cryptopanic.com/api/developer/v2/posts/" (ensure token compatibility)

CACHE_FILE = Path(".news_cache.json")
HEADERS = {"User-Agent": "Mozilla/5.0 (compatible; FenixMultiAgentBot/0.9; +http://example.com/bot)"} # Updated User-Agent
REQUEST_TIMEOUT_SECONDS = 15 # Increased timeout

# --- Cache Functions ---
def _save_cache(payload: Dict[str, Any]) -> None:
    try:
        CACHE_FILE.write_text(json.dumps(payload, indent=2))
        logger.debug(f"News cache saved to {CACHE_FILE}")
    except IOError as e:
        logger.warning(f"Could not write news cache to {CACHE_FILE}: {e}")
    except Exception as e:
        logger.error(f"Unexpected error saving news cache: {e}", exc_info=True)

def _load_cache() -> List[Dict[str, Any]]:
    if CACHE_FILE.exists():
        try:
            with open(CACHE_FILE, 'r') as f:
                data = json.load(f)
            # Validate cache structure (basic check)
            if isinstance(data, dict) and "results" in data and isinstance(data["results"], list):
                logger.debug(f"News cache loaded successfully from {CACHE_FILE}, {len(data['results'])} items.")
                return data["results"]
            else:
                logger.warning(f"News cache file {CACHE_FILE} has invalid format. Ignoring cache.")
                return []
        except json.JSONDecodeError as e:
            logger.warning(f"Error decoding news cache JSON from {CACHE_FILE}: {e}. Ignoring cache.")
            return []
        except Exception as e:
            logger.error(f"Unexpected error loading news cache: {e}", exc_info=True)
            return []
    logger.debug(f"News cache file {CACHE_FILE} not found.")
    return []

# --- Main Fetch Function ---
def fetch_news(max_retries_per_token: int = 2, initial_pause_seconds: int = 5, limit: int = 30) -> List[Dict[str, Any]]:
    """
    Fetches posts from CryptoPanic API.
    Tries multiple API tokens if provided and retries with exponential backoff.
    Uses a local cache as a fallback.

    Args:
        max_retries_per_token: Number of retries for each API token.
        initial_pause_seconds: Initial pause duration for retries.
        limit: Number of news items to fetch.

    Returns:
        A list of news item dictionaries, or an empty list if all attempts fail and cache is empty.
    """
    if not CRYPTOPANIC_API_TOKENS or CRYPTOPANIC_API_TOKENS == ["dummy_token_please_configure"]:
        logger.error("No valid CryptoPanic API tokens configured. Cannot fetch news.")
        return _load_cache() # Fallback to cache immediately

    for token_index, token in enumerate(CRYPTOPANIC_API_TOKENS):
        api_url_with_token = f"{API_BASE_URL}?auth_token={token}&kind=news&public=true&limit={limit}"
        logger.info(f"Attempting to fetch news with token #{token_index + 1} (ending with ...{token[-4:] if len(token) > 4 else token})")

        for attempt in range(max_retries_per_token):
            try:
                response = requests.get(api_url_with_token, timeout=REQUEST_TIMEOUT_SECONDS, headers=HEADERS)
                
                if response.status_code == 200:
                    data = response.json()
                    if "results" in data and isinstance(data["results"], list):
                        logger.info(f"Successfully fetched {len(data['results'])} news items using token ending ...{token[-4:]}.")
                        _save_cache(data)
                        return data["results"]
                    else:
                        logger.warning(f"CryptoPanic API response OK, but 'results' field missing or not a list. Token: ...{token[-4:]}.")
                        # Treat as a soft error, might try next token or cache
                        break # Break from retries for this token, try next token

                elif response.status_code == 400:
                    logger.error(f"CryptoPanic API Error 400 (Bad Request) with token ...{token[-4:]}. Likely an issue with request parameters or token format. Response: {response.text[:200]}")
                    break # Don't retry this token for 400, try next token
                elif response.status_code == 401:
                    logger.error(f"CryptoPanic API Error 401 (Unauthorized) with token ...{token[-4:]}. Token is invalid or expired.")
                    break # Don't retry this token for 401, try next token
                elif response.status_code == 403:
                    logger.error(f"CryptoPanic API Error 403 (Forbidden) with token ...{token[-4:]}. Token might lack permissions or be blocked.")
                    break # Don't retry this token for 403, try next token
                elif response.status_code == 429:
                    logger.warning(f"CryptoPanic API Error 429 (Too Many Requests) with token ...{token[-4:]}. Attempt {attempt + 1}/{max_retries_per_token}.")
                    # Respect Retry-After header if present
                    retry_after = response.headers.get("Retry-After")
                    sleep_duration = initial_pause_seconds * (2 ** attempt) # Exponential backoff
                    if retry_after and retry_after.isdigit():
                        sleep_duration = max(sleep_duration, int(retry_after) + 1)
                    logger.info(f"Rate limited. Waiting for {sleep_duration} seconds before retrying token ...{token[-4:]}.")
                    time.sleep(sleep_duration)
                    continue # Retry this token after waiting
                else:
                    # For other 4xx/5xx errors
                    logger.warning(
                        f"CryptoPanic API request failed with status {response.status_code}. Token: ...{token[-4:]}, "
                        f"Attempt {attempt + 1}/{max_retries_per_token}. Response: {response.text[:200]}"
                    )
                    response.raise_for_status() # Will be caught by RequestException

            except requests.exceptions.Timeout:
                logger.warning(f"CryptoPanic API request timed out (>{REQUEST_TIMEOUT_SECONDS}s). Token: ...{token[-4:]}, Attempt {attempt + 1}/{max_retries_per_token}.")
            except requests.exceptions.RequestException as e:
                logger.warning(
                    f"CryptoPanic API request error with token ...{token[-4:]}: {e}. "
                    f"Attempt {attempt + 1}/{max_retries_per_token}."
                )
            
            if attempt < max_retries_per_token - 1:
                sleep_time = initial_pause_seconds * (2 ** attempt)
                logger.info(f"Waiting {sleep_time}s before next retry with token ...{token[-4:]}.")
                time.sleep(sleep_time)
            else:
                logger.error(f"All {max_retries_per_token} retries failed for token ...{token[-4:]}.")
        
        # If loop completes for a token without returning, it means that token failed.
        # The outer loop will then try the next token.

    logger.error("All API tokens failed. Falling back to local cache for news.")
    return _load_cache()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
    # Example: Set CRYPTOPANIC_TOKENS in your environment
    # For testing, you can temporarily set it here if not in .env
    # os.environ["CRYPTOPANIC_TOKENS"] = "YOUR_API_TOKEN_1,YOUR_API_TOKEN_2"
    
    if not CRYPTOPANIC_TOKENS_STR:
        print("Please set the CRYPTOPANIC_TOKENS environment variable with your API key(s).")
        print("Example: export CRYPTOPANIC_TOKENS='your_key_here' or add to .env file.")
    else:
        print(f"Fetching news with token(s) ending: ...{[t[-4:] if len(t) > 4 else t for t in CRYPTOPANIC_API_TOKENS]}")
        news_items = fetch_news(limit=5)
        if news_items:
            print(f"\nFetched {len(news_items)} news items:")
            for i, item in enumerate(news_items):
                print(f"{i+1}. {item.get('title', 'No Title')}")
        else:
            print("\nCould not fetch news items after all attempts and cache fallback.")

