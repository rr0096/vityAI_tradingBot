#!/bin/bash
# Script de verificaci√≥n del sistema despu√©s de configurar .env

echo "üîß FenixTradingBot - Verificaci√≥n del Sistema"
echo "============================================"

# 1. Verificar que el archivo .env existe
if [ ! -f ".env" ]; then
    echo "‚ùå Archivo .env no encontrado"
    echo "   Por favor crea el archivo .env con tus API keys"
    exit 1
fi

echo "‚úÖ Archivo .env encontrado"

# 2. Verificar dependencias de Python
echo "üêç Verificando dependencias de Python..."
python3 -c "
try:
    import asyncio, aiohttp, websockets
    from binance import Client
    print('‚úÖ Dependencias b√°sicas instaladas')
except ImportError as e:
    print(f'‚ùå Falta dependencia: {e}')
    exit(1)
"

# 3. Verificar que Ollama est√° funcionando
echo "ü§ñ Verificando Ollama..."
if command -v ollama &> /dev/null; then
    echo "‚úÖ Ollama CLI encontrado"
    
    # Verificar que hay modelos disponibles
    models=$(ollama list 2>/dev/null | grep -v "NAME" | wc -l)
    if [ $models -gt 0 ]; then
        echo "‚úÖ Modelos Ollama disponibles: $models"
    else
        echo "‚ö†Ô∏è  No hay modelos Ollama descargados"
        echo "   Recomendaci√≥n: ollama pull qwen2.5:7b-instruct"
    fi
else
    echo "‚ùå Ollama no encontrado"
    echo "   Por favor instala Ollama desde https://ollama.ai"
fi

# 4. Test de configuraci√≥n (sin exponer API keys)
echo "‚öôÔ∏è  Verificando configuraci√≥n..."
python3 -c "
try:
    from config.config_loader import APP_CONFIG
    print('‚úÖ Configuraci√≥n cargada correctamente')
    print(f'   S√≠mbolo: {APP_CONFIG.trading.symbol}')
    print(f'   Timeframe: {APP_CONFIG.trading.timeframe}')
    print(f'   Testnet: {APP_CONFIG.trading.use_testnet}')
except Exception as e:
    print(f'‚ùå Error en configuraci√≥n: {e}')
    exit(1)
"

# 5. Test de conexi√≥n Binance (sin revelar keys)
echo "üîó Verificando conexi√≥n Binance..."
python3 -c "
try:
    import os
    from binance import Client
    
    api_key = os.getenv('BINANCE_API_KEY')
    api_secret = os.getenv('BINANCE_API_SECRET')
    
    if not api_key or not api_secret:
        print('‚ùå API keys no configuradas en .env')
        exit(1)
    
    print('‚úÖ API keys encontradas')
    
    # Test de conexi√≥n b√°sica
    client = Client(api_key, api_secret, testnet=True)
    client.futures_ping()
    print('‚úÖ Conexi√≥n Binance Testnet exitosa')
    
except Exception as e:
    print(f'‚ùå Error de conexi√≥n Binance: {e}')
    print('   Verifica tus API keys en .env')
    exit(1)
"

echo ""
echo "üéâ VERIFICACI√ìN COMPLETA"
echo "========================"
echo "El sistema est√° listo para paper trading!"
echo ""
echo "Comandos disponibles:"
echo "  python run_paper_trading.py --duration 30"
echo "  python live_trading.py (con testnet)"
echo ""
